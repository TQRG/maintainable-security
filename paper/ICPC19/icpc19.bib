@article{Reis:2017:IJSSE,
 author = {Reis, Sofia and Abreu, Rui},
 title = {A Database of Existing Vulnerabilities to Enable Controlled Testing Studies},
 journal = {International Journal of Secure Software Engineering (IJSSE)},
 issue_date = {2017},
 volume = {8},
 number = {3},
 year = {2017},
 numpages = {1-23},
 url = {https://www.igi-global.com/article/a-database-of-existing-vulnerabilities-to-enable-controlled-testing-studies/201213},
 doi = {10.4018/IJSSE.2017070101},
 acmid = {1330021},
 publisher = {IGI Global}
 } 
 
 @INPROCEEDINGS{7816479, 
 author={H. Borges and A. Hora and M. T. Valente}, 
 booktitle={2016 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
 title={Understanding the Factors That Impact the Popularity of GitHub Repositories}, 
 year={2016}, 
 volume={}, 
 number={}, 
 pages={334-344}, 
 keywords={public domain software;software reviews;source code (software);time series;GitHub Repositories;open source developers;software acceptance;software system popularity;open source software;stargazers button;GitHub projects;programming language;project popularity;time series;software market;Software;Libraries;Organizations;Documentation;HTML;Java;GitHub;Software Popularity;Open Source software;Social coding}, 
 doi={10.1109/ICSME.2016.31}, 
 ISSN={}, 
 month={Oct},}
 
 @INPROCEEDINGS{7476680, 
 author={I. Kádár and P. Hegedus and R. Ferenc and T. Gyimóthy}, 
 booktitle={2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)}, 
 title={A Code Refactoring Dataset and Its Assessment Regarding Software Maintainability}, 
 year={2016}, 
 volume={1}, 
 number={}, 
 pages={599-603}, 
 keywords={public domain software;software maintenance;software metrics;software reliability;source code (software);code refactoring dataset processing;excessive open dataset;source code metrics;open-source systems;quality attributes;source code classes;clone metrics;software maintainability;Measurement;Cloning;Open source software;Correlation;Java;Complexity theory;code refactoring;software maintainability;empirical study}, 
 doi={10.1109/SANER.2016.42}, 
 ISSN={}, 
 month={March},}
 
 @article{HEGEDUS2018313,
 title = "Empirical evaluation of software maintainability based on a manually validated refactoring dataset",
 journal = "Information and Software Technology",
 volume = "95",
 pages = "313 - 327",
 year = "2018",
 issn = "0950-5849",
 doi = "https://doi.org/10.1016/j.infsof.2017.11.012",
 url = "http://www.sciencedirect.com/science/article/pii/S0950584916303561",
 author = "Péter Hegedűs and István Kádár and Rudolf Ferenc and Tibor Gyimóthy",
 keywords = "Code refactoring, Manually validated empirical dataset, Source code metrics, Software maintainability, Empirical study",
 abstract = "Context
 Refactoring is a technique for improving the internal structure of software systems. It has a solid theoretical background while being used in development practice also. However, we lack empirical research results on the real effect of code refactoring and its application.
 Objective
 This paper presents a manually validated subset of a previously published dataset containing the refactorings extracted by the RefFinder tool, code metrics, and maintainability of 7 open-source systems. We found that RefFinder had around 27% overall average precision on the subject systems, thus our manually validated subset has substantial added value. Using the dataset, we studied several aspects of the refactored and non-refactored source code elements (classes and methods), like the differences in their maintainability and source code metrics.
 Method
 We divided the source code elements into a group containing the refactored elements and a group with non-refactored elements. We analyzed the elements’ characteristics in these groups using correlation analysis, Mann–Whitney U test and effect size measures.
 Results
 Source code elements subjected to refactorings had significantly lower maintainability than elements not affected by refactorings. Moreover, refactored elements had significantly higher size related metrics, complexity, and coupling. Also these metrics changed more significantly in the refactored elements. The results are mostly in line with our previous findings on the not validated dataset, with the difference that clone metrics had no strong connection with refactoring.
 Conclusions
 Compared to the preliminary analysis using a not validated dataset, the manually validated dataset led to more significant results, which suggests that developers find targets for refactorings based on some internal quality properties of the source code, like their size, complexity or coupling, but not clone related metrics as reported in our previous studies. They do not just use these properties for identifying targets, but also control them with refactorings."
 }
 
 
 
 @article{borges2015popularity,
   title={On the popularity of GitHub applications: A preliminary note},
   author={Borges, Hudson and Valente, Marco Tulio and Hora, Andre and Coelho, Jailton},
   journal={arXiv preprint arXiv:1507.00604},
   year={2015}
 }
 
 
@book{Visser:2016:OREILLY,
  author = {Joost Visser},
  title = {Building Maintainable Software, Java Edition: Ten Guidelines for Future-Proof Code},
  issue_date = {2016},
  publisher = {O'Reilly Media, Inc.}
  }


@techreport{oswap:2017,
	author ={The OWASP Foundation},
	title       = {OWASP Top 10 - 2017: The Ten Most Critical Web Application Security Risks},
	institution = {The OWASP Foundation},
	month       = {February},
	year        = {2017},
	note =  {Release Candidate}
}

@techreport{oswap:2013,
	author ={The OWASP Foundation},
	title       = {OWASP Top 10 - 2017: The Ten Most Critical Web Application Security Risks},
	institution = {The OWASP Foundation},
	month       = {February},
	year        = {2017},
	note =  {Release Candidate}
}